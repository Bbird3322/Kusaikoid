<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>Kusaikoid(仮)</title>
  <style>
    body {
      font-family: sans-serif;
      margin: 0;
      display: flex;
      height: 100vh;
      align-items: flex-start;
    }
    #sidebarToggle {
      position: fixed;
      top: 0.5em;
      left: 0;
      background: #333;
      color: white;
      padding: 0.5em 1em;
      cursor: pointer;
      z-index: 1001;
    }
    #sidebar {
      width: 320px;
      background: #f0f0f0;
      padding: 1em;
      box-shadow: 2px 0 5px rgba(0,0,0,0.2);
      transition: transform 0.3s ease-in-out;
      overflow-y: auto;
      position: fixed;
      left: 0;
      top: 0;
      height: 100vh;
      z-index: 1000;
    }
    /* #sidebar.bottom { 下表示は無効化（常に左固定） } */
    #sidebar.closed {
      transform: translateX(-100%);
    }
    #main {
      flex: 1;
      padding: 2em;
      overflow-y: auto;
      margin-left: 335px; /* サイドバーの幅分だけ右にずらす（開時） */
      transition: margin-left 0.3s;
    }
    #sidebar.closed ~ #main {
      margin-left: 0 !important; /* サイドバー閉時は左寄せ */
    }
    textarea, select {
      margin-bottom: 0.5em;
      padding: 0.5em;
    }
    textarea {
      width: 100%;
    }
    select {
      min-width: 150px;
    }
    button {
      padding: 0.5em 1em;
      margin-right: 0.5em;
      border: none;
      border-radius: 4px;
      background-color: #007bff;
      color: white;
      cursor: pointer;
    }

    /* セグメント操作ボタン用の白色スタイル */
    #segmentsAudioList .segment-controls button {
      background-color: #fff;
      color: #333;
      border: 1px solid #bbb;
    }
    button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      background-color: #aaa;
    }
    #regenerateBtn {
      background-color: #d9534f;
    }
    #segmentsAudioList > div {
      margin-bottom: 1em;
    }
    #segmentsAudioList .segment-controls {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5em;
      margin-top: 0.5em;
    }
    #segmentsAudioList textarea {
      width: 100%;
      resize: vertical;
    }
    .sectionTitle {
      margin-top: 1em;
      font-weight: bold;
    }
    #changeNotice {
      color: #d9534f;
      font-weight: bold;
      margin-top: 0.5em;
      display: none;
    }

    /* 右サイドバー */
    .right-sidebar {
      position: fixed;
      top: 0;
      right: 0;
      width: 630px;
      min-width: 630px;
      max-width: 100vw;
      height: 100vh;
      background: #f8f8f8;
      box-shadow: -2px 0 5px rgba(0,0,0,0.15);
      z-index: 1050;
      padding: 0;
      display: flex;
      flex-direction: column;
      transition: transform 0.3s;
    }
    .right-sidebar.closed {
      transform: translateX(100%);
    }
    .tab-header {
      display: flex;
      border-bottom: 1px solid #ddd;
      background: #f4f4f4;
      height: 52px;
    }
    .tab-btn {
      flex: 1;
      min-width: 0;
      padding: 0 0.2em;
      border: none;
      background: none;
      font-size: 1.13em;
      cursor: pointer;
      outline: none;
      border-right: 1px solid #ddd;
      transition: background 0.2s, color 0.2s;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #555;
      font-weight: 500;
      letter-spacing: 0.05em;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .tab-btn:last-child {
      border-right: none;
    }
    .tab-btn.active {
      background: #fff;
      font-weight: bold;
      color: #007bff;
      border-bottom: 2.5px solid #007bff;
    }
    .tab-content {
      flex: 1;
      padding: 1.2em;
      background: #fff;
      overflow-y: auto;
    }

    /* ⚙ボタン */
    #settingsBtn {
      position: fixed;
      right: 2em;
      bottom: 2em;
      z-index: 1100;
      width: 56px;
      height: 56px;
      border-radius: 50%;
      font-size: 2em;
      background: #fff;
      color: #333;
      border: 2px solid #bbb;
      box-shadow: 0 2px 8px rgba(0,0,0,0.18);
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0;
      transition: box-shadow 0.2s, border-color 0.2s;
    }
    #settingsBtn:active, #settingsBtn:focus {
      box-shadow: 0 4px 16px rgba(0,0,0,0.25);
      border-color: #007bff;
      outline: none;
    }
    #settingsBtn:before {
      content: '';
      display: inline-block;
      vertical-align: middle;
      height: 100%;
    }
  </style>
</head>
<body>

  <div id="sidebarToggle">≡ 入力</div>
  <!-- サイドバー位置切替ボタンは不要なので削除 -->

  <div id="sidebar" class="">
    <br>
    <h2>音声生成</h2>
    <label for="voiceSelect">デフォルトの声:</label>
    <select id="voiceSelect">
      <option value="2">拓也さん / CV.SHOW</option>
      <option value="3">MISAKI</option>
      <option value="4">SAYAKA</option>
      <option value="5">HIKARI</option>
      <option value="6">マネージャー / CV.HARUKA</option>
      <option value="7">RYO</option>
      <option value="8">レオ / CV.TAKERU</option>
    </select>
    <br>
    <label for="textInput">テキストを入力:</label>
    <textarea id="textInput" rows="10">「クリスマス・イブは３日間くらいあるといいんだよね。だってさぁ、イヴの日とかに一人のオンナの子とかいっぱいいてかわいそうじゃん！」なんて言っていながら、オレにとっての本命くんがはたしてイブに呼んでくれるかどうかやっぱり気になる。本命クンは決して絶対に約束なんかしてくれない。だからオレはグレまくってウリなんかやっている。それに絶対決して「好きだ」なんて言ってくれない。単なる「ペット」として愛してくれているだけだ。</textarea>
    <div id="charCount">0文字</div>

    <button id="generateBtn">MP3を生成</button>
    <button id="regenerateBtn" disabled>編集後のMP3を再生成</button>

    <div class="sectionTitle">統合音声</div>
    <div id="result"></div>
    <button id="downloadBtn" disabled>MP3をダウンロード</button>
    <div id="changeNotice">変更点が更新されていません。</div>
  </div>

  <div id="main">
    <h1>Kusaikoid(仮)</h1>
    <div class="sectionTitle">単文別音声</div>
    <div id="segmentsAudioList"></div>
  </div>

  <!-- 右下の⚙ボタン -->
  <button id="settingsBtn">⚙</button>

  <!-- 右サイドバー -->
  <div id="rightSidebar" class="right-sidebar">
    <div class="tab-header">
      <button class="tab-btn active" data-tab="tab-desc">説明書</button>
      <button class="tab-btn" data-tab="tab-filter">フィルター</button>
      <button class="tab-btn" data-tab="tab-batch">バッチ操作</button>
      <button class="tab-btn" data-tab="tab-segment">精文化</button>
      <button class="tab-btn" data-tab="tab-download">ダウンロード</button>
    </div>
    <div class="tab-content" id="tab-desc" style="display:block;"></div>
    <div class="tab-content" id="tab-filter" style="display:none;"></div>
    <div class="tab-content" id="tab-batch" style="display:none;"></div>
    <div class="tab-content" id="tab-segment" style="display:none;"></div>
    <div class="tab-content" id="tab-download" style="display:none;"></div>
  </div>

  <script>
    // ====== DOM要素取得 ======
    const generateBtn = document.getElementById('generateBtn'); // MP3生成ボタン
    const regenerateBtn = document.getElementById('regenerateBtn'); // 再生成ボタン
    const textInput = document.getElementById('textInput'); // 入力テキストエリア
    const charCount = document.getElementById('charCount'); // 文字数表示
    const resultDiv = document.getElementById('result'); // 統合音声表示エリア
    const downloadBtn = document.getElementById('downloadBtn'); // ダウンロードボタン
    const segmentsAudioList = document.getElementById('segmentsAudioList'); // セグメント音声リスト
    const sidebar = document.getElementById('sidebar'); // サイドバー
    const toggle = document.getElementById('sidebarToggle'); // サイドバー開閉ボタン
    const defaultVoiceSelect = document.getElementById("voiceSelect"); // デフォルト声選択
    const changeNotice = document.getElementById('changeNotice'); // 変更通知
    const settingsBtn = document.getElementById('settingsBtn'); // ⚙ボタン
    const rightSidebar = document.getElementById('rightSidebar'); // 右サイドバー

    // ====== グローバル変数 ======
    let finalBlobURL = null; // 統合音声のBlob URL
    let currentSegments = []; // 現在のセグメント配列

    // ====== サイドバー開閉 ======
    toggle.addEventListener('click', () => {
      sidebar.classList.toggle('closed');
      // サイドバーの開閉に応じて#mainのmargin-leftを調整
      const main = document.getElementById('main');
      if (sidebar.classList.contains('closed')) {
        main.style.marginLeft = '0';
      } else {
        main.style.marginLeft = '335px';
      }
    });

    // ====== 入力文字数カウント ======
    textInput.addEventListener('input', () => {
      charCount.textContent = `${textInput.value.length} 文字`;
    });
    charCount.textContent = `${textInput.value.length} 文字`;

    // ====== 変更通知の表示制御 ======
    function updateChangeNotice() {
      if (!regenerateBtn.disabled) {
        changeNotice.style.display = 'block';
      } else {
        changeNotice.style.display = 'none';
      }
    }



    /**
     * TTS（テキスト読み上げ）用のURLを生成する
     * @param {string} vid - 声のID
     * @param {string} text - 読み上げるテキスト
     * @returns {string} - 生成されたTTSリクエストURL
     */
    function generateTTSURL(vid, text) {
      // 特殊文字をAPIで読める形に置換
      const sanitized = text.replace(/&/g, 'アンド').replace(/=/g, 'イコール');
      return `https://cache-a.oddcast.com/tts/genC.php?EID=3&LID=12&VID=${vid}&TXT=${encodeURIComponent(sanitized)}&EXT=mp3&FNAME=&ACC=15679&SceneID=2646118&HTTP_ERR=`;
    }


    /**
     * テキストを文ごとに分割する（。！？で区切る）
     * @param {string} text - 入力テキスト
     * @returns {string[]} - 文ごとの配列
     */
    function splitTextBySentence(text) {
      // 正規表現で文末（。！？）ごとに分割
      const sentences = text.match(/[^。！？\r\n]*[。！？]?/g) || [];
      return sentences.map(s => s.trim()).filter(Boolean);
    }


    /**
     * 指定URLからMP3ファイル（Blob）を取得する
     * @param {string} url - MP3ファイルのURL
     * @returns {Promise<Blob>} - 取得したMP3のBlob
     */
    async function fetchMP3Blob(url) {
      const res = await fetch(url, { mode: 'cors' });
      if (!res.ok) throw new Error("音声ファイル取得に失敗");
      return await res.blob();
    }




/**
 * セグメントUIのみを即時描画（音声は再生成時のみ取得）
 * @param {Array<{text: string, vid: string}>} segmentsData
 */
function renderSegmentsUI(segmentsData) {
  segmentsAudioList.innerHTML = '';
  segmentsData.forEach((seg, i) => {
    const div = document.createElement('div');
    // セグメントdivにdata-*属性を付与
    div.dataset.voice = seg.vid || '';
    div.dataset.edited = seg.edited === true ? 'true' : 'false';
    div.dataset.selected = seg.selected === true ? 'true' : 'false';
    div.dataset.visible = seg.visible === false ? 'false' : 'true';
    div.dataset.originalText = seg.originalText !== undefined ? seg.originalText : seg.text;

    const textarea = document.createElement('textarea');
    textarea.rows = 2;
    textarea.value = seg.text;
    textarea.dataset.index = i;
    // 再生ボタンは常に無効化
    const controls = document.createElement('div');
    controls.className = 'segment-controls';
    const playButton = document.createElement('button');
    playButton.textContent = '🔊 再生';
    playButton.disabled = true;
    // 声選択
    const voiceSelect = defaultVoiceSelect.cloneNode(true);
    voiceSelect.removeAttribute('id');
    voiceSelect.value = seg.vid;
    voiceSelect.onchange = () => {
      seg.vid = voiceSelect.value;
      regenerateBtn.disabled = false;
      updateChangeNotice();
      updateVoiceFilterOptions(); // 声変更時にフィルタ選択肢も更新
    };
    // テキスト編集
    textarea.oninput = () => {
      seg.text = textarea.value.trim();
      regenerateBtn.disabled = false;
      updateChangeNotice();
    };
    // セグメント削除
    const deleteButton = document.createElement('button');
    deleteButton.textContent = '🗑️';
    deleteButton.onclick = () => {
      segmentsData.splice(i, 1);
      regenerateBtn.disabled = false;
      updateChangeNotice();
      renderSegmentsUI(segmentsData);
      updateVoiceFilterOptions(); // 削除時も更新
    };
    // セグメント挿入（上）
    const insertAboveButton = document.createElement('button');
    insertAboveButton.textContent = '＋上';
    insertAboveButton.onclick = () => {
      segmentsData.splice(i, 0, { text: 'テキストを挿入。', vid: seg.vid });
      regenerateBtn.disabled = false;
      updateChangeNotice();
      renderSegmentsUI(segmentsData);
      updateVoiceFilterOptions(); // 挿入時も更新
    };
    // セグメント挿入（下）
    const insertBelowButton = document.createElement('button');
    insertBelowButton.textContent = '＋下';
    insertBelowButton.onclick = () => {
      segmentsData.splice(i + 1, 0, { text: 'テキストを挿入。', vid: seg.vid });
      regenerateBtn.disabled = false;
      updateChangeNotice();
      renderSegmentsUI(segmentsData);
      updateVoiceFilterOptions(); // 挿入時も更新
    };
    controls.append(playButton, voiceSelect, deleteButton, insertAboveButton, insertBelowButton);
    div.append(textarea, controls);
    segmentsAudioList.appendChild(div);
  });
  updateVoiceFilterOptions(); // UI描画後にも必ず呼ぶ
}

/**
 * セグメントごとに音声を生成し、UIに反映する
 * @param {Array<{text: string, vid: string}>} segmentsData - 各セグメントのテキストと声ID
 */
async function generateAudioFromSegments(segmentsData) {
  // --- 1. UI初期化 ---
  resultDiv.textContent = '生成中...';
  if (finalBlobURL) {
    URL.revokeObjectURL(finalBlobURL);
    finalBlobURL = null;
  }
  downloadBtn.disabled = true;
  // --- 2. 各セグメントの音声を先に全て取得 ---
  const mergedBlobs = [];
  const segmentBlobs = [];
  let ttsCount = 0;
  // 5～10回ごとに7～10秒休止
  let ttsLimit = Math.floor(Math.random() * 6) + 5; // 5～10
  for (let i = 0; i < segmentsData.length; i++) {
    const seg = segmentsData[i];
    const url = generateTTSURL(seg.vid, seg.text);
    try {
      const blob = await fetchMP3Blob(url);
      segmentBlobs.push(blob);
      mergedBlobs.push(blob);
    } catch {
      segmentBlobs.push(null);
      mergedBlobs.push(new Blob());
    }
    ttsCount++;
    if (ttsCount >= ttsLimit && i < segmentsData.length - 1) {
      // 7～10秒休止
      const sleepMs = (Math.floor(Math.random() * 4) + 7) * 1000; // 7～10秒
      await new Promise(res => setTimeout(res, sleepMs));
      ttsCount = 0;
      ttsLimit = Math.floor(Math.random() * 6) + 5; // 5～10
    }
  }
  // --- 3. UI生成（音声取得後なので再生ボタンは必ず動く） ---
  segmentsAudioList.innerHTML = '';
  segmentsData.forEach((seg, i) => {
    const div = document.createElement('div');
    const textarea = document.createElement('textarea');
    textarea.rows = 2;
    textarea.value = seg.text;
    textarea.dataset.index = i;
    let currentBlob = segmentBlobs[i];
    const controls = document.createElement('div');
    controls.className = 'segment-controls';
    const playButton = document.createElement('button');
    playButton.textContent = '🔊 再生';
    playButton.disabled = !currentBlob;
    playButton.onclick = () => {
      if (currentBlob) new Audio(URL.createObjectURL(currentBlob)).play();
    };
    const voiceSelect = defaultVoiceSelect.cloneNode(true);
    voiceSelect.removeAttribute('id');
    voiceSelect.value = seg.vid;
    voiceSelect.onchange = async () => {
      seg.vid = voiceSelect.value;
      regenerateBtn.disabled = false;
      updateChangeNotice();
      updateVoiceFilterOptions(); // 声変更時にフィルタ選択肢も更新
      try {
        playButton.disabled = true;
        playButton.textContent = '生成中...';
        currentBlob = await fetchMP3Blob(generateTTSURL(voiceSelect.value, seg.text));
        playButton.textContent = '🔊 再生';
        playButton.disabled = false;
      } catch {
        playButton.textContent = 'エラー';
        playButton.disabled = true;
      }
    };
    textarea.oninput = async () => {
      seg.text = textarea.value.trim();
      regenerateBtn.disabled = false;
      updateChangeNotice();
      try {
        playButton.disabled = true;
        playButton.textContent = '生成中...';
        currentBlob = await fetchMP3Blob(generateTTSURL(voiceSelect.value, seg.text));
        playButton.textContent = '🔊 再生';
        playButton.disabled = false;
      } catch {
        playButton.textContent = 'エラー';
        playButton.disabled = true;
      }
    };
    const deleteButton = document.createElement('button');
    deleteButton.textContent = '🗑️';
    deleteButton.onclick = async () => {
      segmentsData.splice(i, 1);
      regenerateBtn.disabled = false;
      updateChangeNotice();
      renderSegmentsUI(segmentsData);
      updateVoiceFilterOptions(); // 削除時も更新
    };
    const insertAboveButton = document.createElement('button');
    insertAboveButton.textContent = '＋上';
    insertAboveButton.onclick = async () => {
      segmentsData.splice(i, 0, { text: 'テキストを挿入。', vid: seg.vid });
      regenerateBtn.disabled = false;
      updateChangeNotice();
      renderSegmentsUI(segmentsData);
      updateVoiceFilterOptions(); // 挿入時も更新
    };
    const insertBelowButton = document.createElement('button');
    insertBelowButton.textContent = '＋下';
    insertBelowButton.onclick = async () => {
      segmentsData.splice(i + 1, 0, { text: 'テキストを挿入。', vid: seg.vid });
      regenerateBtn.disabled = false;
      updateChangeNotice();
      renderSegmentsUI(segmentsData);
      updateVoiceFilterOptions(); // 挿入時も更新
    };
    controls.append(playButton, voiceSelect, deleteButton, insertAboveButton, insertBelowButton);
    div.append(textarea, controls);
    segmentsAudioList.appendChild(div);
  });
  updateVoiceFilterOptions(); // UI生成後にも必ず呼ぶ
  // --- 4. 統合音声の生成・UI反映 ---
  finalBlobURL = URL.createObjectURL(new Blob(mergedBlobs, { type: 'audio/mp3' }));
  resultDiv.textContent = '';
  const audio = document.createElement('audio');
  audio.controls = true;
  audio.src = finalBlobURL;
  resultDiv.appendChild(audio);
  downloadBtn.disabled = false;
  regenerateBtn.disabled = true;
  updateChangeNotice();
}



// ====== MP3生成ボタン ======
generateBtn.addEventListener('click', async () => {
  const rawText = textInput.value.trim();
  const defaultVid = defaultVoiceSelect.value;
  if (!rawText) {
    alert("テキストを入力してください");
    return;
  }
  // テキストを文ごとに分割し、セグメント配列を作成
  const segments = splitTextBySentence(rawText).map(txt => ({ text: txt, vid: defaultVid }));
  currentSegments = segments;
  // まずUIのみ即時描画せず、初回から音声生成まで行う
  await generateAudioFromSegments(currentSegments);
  regenerateBtn.disabled = true;
  updateChangeNotice();
});

// ====== 再生成ボタン ======
regenerateBtn.addEventListener('click', async () => {
  await generateAudioFromSegments(currentSegments);
  regenerateBtn.disabled = true;
  updateChangeNotice();
});

// ====== ダウンロードボタン ======
downloadBtn.addEventListener('click', () => {
  if (!finalBlobURL) return;
  const a = document.createElement('a');
  a.href = finalBlobURL;
  a.download = 'merged_audio.mp3';
  document.body.appendChild(a);
  a.click();
  a.remove();
});

// 初期表示時はセグメントUIを描画しない（mp3生成時のみ生成）

    // 右下⚙ボタンで右サイドバー開閉
    settingsBtn.addEventListener('click', () => {
      rightSidebar.classList.toggle('closed');
    });

    // タブ切り替え
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    tabBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        tabBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        tabContents.forEach(tc => tc.style.display = 'none');
        const target = document.getElementById(btn.dataset.tab);
        if (target) target.style.display = 'block';
      });
    });


    // ====== 説明タブ内容 ======
    const descTab = document.getElementById('tab-desc');
    descTab.innerHTML = `
      <h2>KUSAIKOID ver.beta4.1</h2>
      <ul style="margin-left:1.2em;">
        <li>テキストを文ごとに分割し、各文ごとに声や内容を編集できます。</li>
        <li>「＋上」「＋下」で文を追加、「🗑️」で削除できます。</li>
        <li>編集後は「編集後のMP3を再生成」ボタンで音声を再取得してください。</li>
        <li>サイドバーは≡ボタン、右下⚙ボタンで開閉できます。</li>
      </ul>
      <div style="margin-top:1.2em; color:#555;">
        <b>今後の予定:</b> カスタムモデル登録、音声合成の詳細設定などをここに追加可能です。<br>
        UI/UXの追加機能やヘルプもこのエリアに配置できます。
      </div>
    `;

    // フィルタタブにセレクトボックスを追加
    const filterTab = document.getElementById('tab-filter');
    // 音声名リスト（voiceSelectから取得）
    const voiceSelectOptions = Array.from(defaultVoiceSelect.options).map(opt => ({ value: opt.value, label: opt.textContent }));

    // セレクトボックス生成
    const filterLabel = document.createElement('label');
    filterLabel.textContent = '音声フィルタ:';
    filterLabel.style.marginRight = '0.5em';
    const filterSelect = document.createElement('select');
    filterSelect.style.minWidth = '160px';
    filterLabel.appendChild(filterSelect);
    filterTab.appendChild(filterLabel);

    // 検索ボックス追加
    const searchDiv = document.createElement('div');
    searchDiv.style.marginTop = '1em';
    const searchLabel = document.createElement('label');
    searchLabel.textContent = 'テキスト検索:';
    searchLabel.style.marginRight = '0.5em';
    const searchInput = document.createElement('input');
    searchInput.type = 'text';
    searchInput.placeholder = 'キーワードを入力';
    searchInput.style.minWidth = '160px';
    searchDiv.appendChild(searchLabel);
    searchDiv.appendChild(searchInput);
    filterTab.appendChild(searchDiv);

    // 使用中のvoiceのみフィルタセレクトに表示する
    function updateVoiceFilterOptions() {
      // 現在のセグメントで使われているvoiceを集計
      const usedVoices = new Set();
      const segDivs = segmentsAudioList.querySelectorAll('div');
      segDivs.forEach(div => {
        const select = div.querySelector('select');
        if (select) usedVoices.add(select.value);
      });
      // 選択肢を再構築
      const prev = filterSelect.value;
      filterSelect.innerHTML = '';
      const optAll = document.createElement('option');
      optAll.value = '';
      optAll.textContent = 'すべて';
      filterSelect.appendChild(optAll);
      voiceSelectOptions.forEach(opt => {
        if (usedVoices.has(opt.value)) {
          const o = document.createElement('option');
          o.value = opt.value;
          o.textContent = opt.label;
          filterSelect.appendChild(o);
        }
      });
      // 直前の選択値が残っていれば維持
      if ([...filterSelect.options].some(o => o.value === prev)) {
        filterSelect.value = prev;
      } else {
        filterSelect.value = '';
      }
    }


    // フィルタ処理本体（音声フィルタ＋テキスト検索）
    function applyVoiceFilter() {
      const voiceVal = filterSelect.value;
      const searchVal = searchInput.value.trim();
      const segDivs = segmentsAudioList.querySelectorAll('div');
      segDivs.forEach(div => {
        // 各セグメントdiv内の<select>（声選択）を取得
        const voiceSelect = div.querySelector('select');
        const currentVoice = voiceSelect ? voiceSelect.value : '';
        // テキストエリアの値
        const textarea = div.querySelector('textarea');
        const textVal = textarea ? textarea.value : '';
        // 音声フィルタ
        let visible = true;
        if (voiceVal && currentVoice !== voiceVal) visible = false;
        // テキスト検索フィルタ
        if (searchVal && !textVal.includes(searchVal)) visible = false;
        if (visible) {
          div.style.display = '';
          div.dataset.visible = 'true';
        } else {
          div.style.display = 'none';
          div.dataset.visible = 'false';
        }
      });
    }
    filterSelect.addEventListener('change', applyVoiceFilter);
    searchInput.addEventListener('input', applyVoiceFilter);

    // セグメントUI再描画時にもフィルタ選択肢・フィルタを再適用
    const _origRenderSegmentsUI = renderSegmentsUI;
    renderSegmentsUI = function(segmentsData) {
      _origRenderSegmentsUI(segmentsData);
      updateVoiceFilterOptions();
      applyVoiceFilter();
    };

    // MP3生成時にフィルタを「すべて」にリセット
    const _origGenerateBtnHandler = generateBtn.onclick;
    generateBtn.addEventListener('click', () => {
      filterSelect.value = '';
      updateVoiceFilterOptions();
      applyVoiceFilter();
    });
  </script>
</body>
</html>
